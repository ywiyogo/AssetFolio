{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AssetFolio \u00b6 An all-in-one asset tracker and watchlist application that keeps your assets private. Overview \u00b6 AssetFolio is a multi-assets portfolio tracker that keeps our assets private . In the world of cloud technology, many data and information are shared and concentrate on the big technology companies, banks or the data trader companies. Their activities on how to share our data are not transparent. AssetFolio application helps us to keep our asset information private in our computer. It allows us to retrieve information online about the price changes without sharing our asset data. Preview for the activity list using Qt5 and Qt5 pie chart: Preview for the watchlist and asset tracker using WxWidget UI Library: Installation \u00b6 Software Dependencies: Qt5 or wxWidgets for the GUI RapidJSON (submodule) C++ Request (submodule) which depends on libcurl libxml2 Installing the dependency libraries: Windows Install Git, MinGW w64, Qt5 and OpenSSl v1.1.1 Clone vcpkg to C:/Libs/: git clone https://github.com/microsoft/vcpkg.git Build vcpkg by running .\\bootstrap-vcpkg.bat Hook-up user-wide integration: .\\vcpkg integrate install Install the library packages: .\\vcpkg install curl:x64-windows .\\vcpkg install libxml2:x64-windows .\\vcpkg install libssh2:x64-windows .\\vcpkg install zlib:x64-windows Ubuntu sudo apt-get install build-essential checkinstall libssl-dev libcurl4-openssl-dev libxml2-dev libgtest-dev <libgtk-3-dev|qt5-default qtcreator> Fedora sudo dnf install openssl-devel libcurl-devel libxml2-devel gtest-devel <wxGTK3-devel| qt5-qtbase qt5-qtbase-devel qt-creator> Getting Started \u00b6 Download the Source \u00b6 Clone this repository: git clone https://github.com/ywiyogo/AssetFolio.git Updating the submodules git submodule update --init --recursive Clone the CPR library in the submodule folder: cd submodules && git clone https://github.com/whoshuu/cpr.git . Build and Start the Project \u00b6 Currently, the project supports UNIX and Windows. It shall work also on MAC, however, I don't test it yet. UNIX System \u00b6 Got to the project folder and type these commands: mkdir build && cd build cmake .. make ./AssetFolio In order to create an AppImage of the AssetFolio, run these commands in the build folder after executing make : make install DESTDIR=AppDir ../createAppImage.sh Windows System \u00b6 Got to the project folder and type these commands: mkdir build && cd build cmake .. -G \"MinGW Makefiles\" make .\\bin\\AssetFolio.exe Note, change set(GUI \"Qt\") to set(GUI \"Wx\") to build the GUI with WxWidget. An example dataset in data/example.json can be opened with the \"arrow up\" toolbar icon. The C++ Request submodules include GTest to test its code. If we don't want to install GTest in our system, we can disable it in CMakeLists.txt set(USE_SYSTEM_GTEST OFF) .","title":"Home"},{"location":"#assetfolio","text":"An all-in-one asset tracker and watchlist application that keeps your assets private.","title":"AssetFolio"},{"location":"#overview","text":"AssetFolio is a multi-assets portfolio tracker that keeps our assets private . In the world of cloud technology, many data and information are shared and concentrate on the big technology companies, banks or the data trader companies. Their activities on how to share our data are not transparent. AssetFolio application helps us to keep our asset information private in our computer. It allows us to retrieve information online about the price changes without sharing our asset data. Preview for the activity list using Qt5 and Qt5 pie chart: Preview for the watchlist and asset tracker using WxWidget UI Library:","title":"Overview"},{"location":"#installation","text":"Software Dependencies: Qt5 or wxWidgets for the GUI RapidJSON (submodule) C++ Request (submodule) which depends on libcurl libxml2 Installing the dependency libraries: Windows Install Git, MinGW w64, Qt5 and OpenSSl v1.1.1 Clone vcpkg to C:/Libs/: git clone https://github.com/microsoft/vcpkg.git Build vcpkg by running .\\bootstrap-vcpkg.bat Hook-up user-wide integration: .\\vcpkg integrate install Install the library packages: .\\vcpkg install curl:x64-windows .\\vcpkg install libxml2:x64-windows .\\vcpkg install libssh2:x64-windows .\\vcpkg install zlib:x64-windows Ubuntu sudo apt-get install build-essential checkinstall libssl-dev libcurl4-openssl-dev libxml2-dev libgtest-dev <libgtk-3-dev|qt5-default qtcreator> Fedora sudo dnf install openssl-devel libcurl-devel libxml2-devel gtest-devel <wxGTK3-devel| qt5-qtbase qt5-qtbase-devel qt-creator>","title":"Installation"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#download-the-source","text":"Clone this repository: git clone https://github.com/ywiyogo/AssetFolio.git Updating the submodules git submodule update --init --recursive Clone the CPR library in the submodule folder: cd submodules && git clone https://github.com/whoshuu/cpr.git .","title":"Download the Source"},{"location":"#build-and-start-the-project","text":"Currently, the project supports UNIX and Windows. It shall work also on MAC, however, I don't test it yet.","title":"Build and Start the Project"},{"location":"#unix-system","text":"Got to the project folder and type these commands: mkdir build && cd build cmake .. make ./AssetFolio In order to create an AppImage of the AssetFolio, run these commands in the build folder after executing make : make install DESTDIR=AppDir ../createAppImage.sh","title":"UNIX System"},{"location":"#windows-system","text":"Got to the project folder and type these commands: mkdir build && cd build cmake .. -G \"MinGW Makefiles\" make .\\bin\\AssetFolio.exe Note, change set(GUI \"Qt\") to set(GUI \"Wx\") to build the GUI with WxWidget. An example dataset in data/example.json can be opened with the \"arrow up\" toolbar icon. The C++ Request submodules include GTest to test its code. If we don't want to install GTest in our system, we can disable it in CMakeLists.txt set(USE_SYSTEM_GTEST OFF) .","title":"Windows System"},{"location":"lesson_learned/","text":"Lesson Learned \u00b6 This section documents the lesson learned of the development process. It aims for the developers, not for the users. My main motivation to start this project was to build a simple scaleable application which applies the following concepts: multi-platform build using CMake, one source code for creating an application that runs on Windows 10, all Linux Distribution and macOS. the clean architecture or onion architecture which separates the core logic, use case logic, controllers and the frameworks. The architecture allows us to switch the GUI frameworks (Qt5 or wxWidget) and the data sources (API or web-crawling) in the application code. C++ multi-threading and message pasing. Any comments and critics regarding those three concepts are welcome. Concurrency and MessageQueue \u00b6 The challenge in this application is how to manage the running concurrent async tasks for the main GUI task, the GUI updater task and several API request tasks. The message queue is implemented with the template design, and thus the implementation is written in the header file, see 1 . This application sends a disconnect message to end the infinite loop in the async updater task on the GUI side. REST API Communication \u00b6 Implementing the REST API communication in C++ is very challenging. The reason that the modern C++ STL doesn't contain a standard library for the REST API communication. After some research, these following C++ libraries are taken to consideration, with its current drawbacks: POCO: too big for my case, and it needs several minutes to build. C++ REST SDK: needs boost curlpp: confusing concept with Easy and Cleanup . Pistache: this library is promising. However, currently, it doesn't support Windows yet. Served: needs boost The application doesn't need such a complete networking library. Instead, it needs to send a HTTP(S) request and retrieve the response from a web server. Thus, C++ Requests library is very suitable for this application. WxWidget GUI \u00b6 For a beginner, building a GUI application with wxWidget without a builder/creator tool is very challenging. The wxFormBuilder has made my GUI design more convenient than building from scratch without a builder tool. Creating and starting an asynchronous task from the main GUI task leads to an unpredictable program crash during the runtime. Thus, instead of creating a std::async , an UpdaterThread class which is derived from wxThread is created and called in the initWatchlistGrid)() . For the chart visualization, the application includes the wxFreeChart components. The source code can be found in this repository . Software Delivery and Software Release \u00b6 For Windows, several dlls have to be copied to the binary folder. The library vcruntime140.dll has been obtained from C:\\User\\$(Username)\\.vscode\\extensions\\ms-vscode.cpptools-0.28.1\\debugAdapters\\vsdbg\\bin\\Remote Debugger\\x64\\vcruntime140.dll . For Linux, an AppImage file is generated to serve different Linux distributions. Getting the Toolbar Icons \u00b6 The material design icons are downloaded from https://materialdesignicons.com/.","title":"Lesson Learned"},{"location":"lesson_learned/#lesson-learned","text":"This section documents the lesson learned of the development process. It aims for the developers, not for the users. My main motivation to start this project was to build a simple scaleable application which applies the following concepts: multi-platform build using CMake, one source code for creating an application that runs on Windows 10, all Linux Distribution and macOS. the clean architecture or onion architecture which separates the core logic, use case logic, controllers and the frameworks. The architecture allows us to switch the GUI frameworks (Qt5 or wxWidget) and the data sources (API or web-crawling) in the application code. C++ multi-threading and message pasing. Any comments and critics regarding those three concepts are welcome.","title":"Lesson Learned"},{"location":"lesson_learned/#concurrency-and-messagequeue","text":"The challenge in this application is how to manage the running concurrent async tasks for the main GUI task, the GUI updater task and several API request tasks. The message queue is implemented with the template design, and thus the implementation is written in the header file, see 1 . This application sends a disconnect message to end the infinite loop in the async updater task on the GUI side.","title":"Concurrency and MessageQueue"},{"location":"lesson_learned/#rest-api-communication","text":"Implementing the REST API communication in C++ is very challenging. The reason that the modern C++ STL doesn't contain a standard library for the REST API communication. After some research, these following C++ libraries are taken to consideration, with its current drawbacks: POCO: too big for my case, and it needs several minutes to build. C++ REST SDK: needs boost curlpp: confusing concept with Easy and Cleanup . Pistache: this library is promising. However, currently, it doesn't support Windows yet. Served: needs boost The application doesn't need such a complete networking library. Instead, it needs to send a HTTP(S) request and retrieve the response from a web server. Thus, C++ Requests library is very suitable for this application.","title":"REST API Communication"},{"location":"lesson_learned/#wxwidget-gui","text":"For a beginner, building a GUI application with wxWidget without a builder/creator tool is very challenging. The wxFormBuilder has made my GUI design more convenient than building from scratch without a builder tool. Creating and starting an asynchronous task from the main GUI task leads to an unpredictable program crash during the runtime. Thus, instead of creating a std::async , an UpdaterThread class which is derived from wxThread is created and called in the initWatchlistGrid)() . For the chart visualization, the application includes the wxFreeChart components. The source code can be found in this repository .","title":"WxWidget GUI"},{"location":"lesson_learned/#software-delivery-and-software-release","text":"For Windows, several dlls have to be copied to the binary folder. The library vcruntime140.dll has been obtained from C:\\User\\$(Username)\\.vscode\\extensions\\ms-vscode.cpptools-0.28.1\\debugAdapters\\vsdbg\\bin\\Remote Debugger\\x64\\vcruntime140.dll . For Linux, an AppImage file is generated to serve different Linux distributions.","title":"Software Delivery and Software Release"},{"location":"lesson_learned/#getting-the-toolbar-icons","text":"The material design icons are downloaded from https://materialdesignicons.com/.","title":"Getting the Toolbar Icons"},{"location":"user_guide/","text":"User Guide \u00b6 This section provides the user guide how to use the software for managing your portfolio. User Interface \u00b6 The user interface of the application contains 4 parts: Toolbar buttons (top) Control button (left buttons) Table section (middle) Visualization section (right) Transaction Data \u00b6 If you never have a watchlist or a transaction list, you can just start a new empty sheet by choosing the new button on top left with the plus sign. Fill the sheet with your transactions history, and save it by clicking the save button (down arrow button). Choose your local currency or asset currency and save it as a JSON file (* .json ). If have already a watchlist or an Excel list of your investments you can export it to a JSON file. The JSON file has to have three members: \"QueryType\", \"Currency\", and \"Transactions\". In order to create your own compatible json file, you can load the test json file example.json for the symbol ticker or example_isin.json for ISIN. Below is an example of a simple JSON file with a buying entry. { \"Currency\": \"EUR\", \"Transactions\": [ { \"Date\": \"17.11.2016\", \"ID\": \"IE00B0M63177\", \"Name\": \"iShares MSCI Emerging Market\", \"AssetType\": \"ETF\", \"Price\": 2149.7, \"Amount\": 70, \"Broker\": \"MyBroker\" } ] } For a selling transaction, the price and amount have to be negative. For dividends the price value is positive and the amount has to be 0. Since the version 1.4 the transaction type column is removed for simplicity. Dataset Format \u00b6 The application uses the JSON format for saving the transaction activity data. All the user data shall be located in the data folder. The user can see the example.json as the template. Three obligatory member names are Currency and Activities . An ID can be an ISIN or a symbol ticker. The symbol has to be found in https://financialmodelingprep.com/api/v3/company/stock/list or FMPSymbolList.json . The supported AssetType values are: Stock ETF Bond Real_Estate Crypto Commodity Others The Price and Amount values have to be a number (float). API Key \u00b6 An API key is required in order to update the price of the symbolic ticker assets, cryptocurrency and other commodities. The API key can be obtain from https://financialmodelingprep.com or by contacting me to order the API key. After getting the API key, the user can insert the key by clicking the key toolbar button on the top.","title":"User Guide"},{"location":"user_guide/#user-guide","text":"This section provides the user guide how to use the software for managing your portfolio.","title":"User Guide"},{"location":"user_guide/#user-interface","text":"The user interface of the application contains 4 parts: Toolbar buttons (top) Control button (left buttons) Table section (middle) Visualization section (right)","title":"User Interface"},{"location":"user_guide/#transaction-data","text":"If you never have a watchlist or a transaction list, you can just start a new empty sheet by choosing the new button on top left with the plus sign. Fill the sheet with your transactions history, and save it by clicking the save button (down arrow button). Choose your local currency or asset currency and save it as a JSON file (* .json ). If have already a watchlist or an Excel list of your investments you can export it to a JSON file. The JSON file has to have three members: \"QueryType\", \"Currency\", and \"Transactions\". In order to create your own compatible json file, you can load the test json file example.json for the symbol ticker or example_isin.json for ISIN. Below is an example of a simple JSON file with a buying entry. { \"Currency\": \"EUR\", \"Transactions\": [ { \"Date\": \"17.11.2016\", \"ID\": \"IE00B0M63177\", \"Name\": \"iShares MSCI Emerging Market\", \"AssetType\": \"ETF\", \"Price\": 2149.7, \"Amount\": 70, \"Broker\": \"MyBroker\" } ] } For a selling transaction, the price and amount have to be negative. For dividends the price value is positive and the amount has to be 0. Since the version 1.4 the transaction type column is removed for simplicity.","title":"Transaction Data"},{"location":"user_guide/#dataset-format","text":"The application uses the JSON format for saving the transaction activity data. All the user data shall be located in the data folder. The user can see the example.json as the template. Three obligatory member names are Currency and Activities . An ID can be an ISIN or a symbol ticker. The symbol has to be found in https://financialmodelingprep.com/api/v3/company/stock/list or FMPSymbolList.json . The supported AssetType values are: Stock ETF Bond Real_Estate Crypto Commodity Others The Price and Amount values have to be a number (float).","title":"Dataset Format"},{"location":"user_guide/#api-key","text":"An API key is required in order to update the price of the symbolic ticker assets, cryptocurrency and other commodities. The API key can be obtain from https://financialmodelingprep.com or by contacting me to order the API key. After getting the API key, the user can insert the key by clicking the key toolbar button on the top.","title":"API Key"},{"location":"releases/release_notes/","text":"Releases \u00b6 List of the releases Release v1.2 \u00b6 commit 644248c1c8eb37fc5b4ada9cb04b0a6f42d86c99 (tag: V1.2) reduced the column for a new sheet Release v1.1 \u00b6 commit 53b656a02f0b33717a9f1195f1247d61cd672603 (tag: V1.1) Add currency before saving a new sheet; Changed the Column name; Removed QueryType \u00b7 1 month ago First release v1.0 \u00b6 commit 3f8730c419bb5bb92013420e53e9a472b25181dd (tag: V1.0) Corrected CMakefiles.txt, on Linux the keyword CONFIG is not required \u00b7 1 month ago commit ecb3ac1a05909ab9bfad5cadabc8a4789cc13a08 Fixed Windows build and add vcruntime140.dll commit cb7b58fe642f27f654a3f143a74ef71d6f8eb9a2 Fixed app crash during saving invalid entries, added validation commit 927f9320625d24969d0e3319c27062d6e9533aa5 Corrected Windows build and add AppImage creation","title":"Release Notes"},{"location":"releases/release_notes/#releases","text":"List of the releases","title":"Releases"},{"location":"releases/release_notes/#release-v12","text":"commit 644248c1c8eb37fc5b4ada9cb04b0a6f42d86c99 (tag: V1.2) reduced the column for a new sheet","title":"Release v1.2"},{"location":"releases/release_notes/#release-v11","text":"commit 53b656a02f0b33717a9f1195f1247d61cd672603 (tag: V1.1) Add currency before saving a new sheet; Changed the Column name; Removed QueryType \u00b7 1 month ago","title":"Release v1.1"},{"location":"releases/release_notes/#first-release-v10","text":"commit 3f8730c419bb5bb92013420e53e9a472b25181dd (tag: V1.0) Corrected CMakefiles.txt, on Linux the keyword CONFIG is not required \u00b7 1 month ago commit ecb3ac1a05909ab9bfad5cadabc8a4789cc13a08 Fixed Windows build and add vcruntime140.dll commit cb7b58fe642f27f654a3f143a74ef71d6f8eb9a2 Fixed app crash during saving invalid entries, added validation commit 927f9320625d24969d0e3319c27062d6e9533aa5 Corrected Windows build and add AppImage creation","title":"First release v1.0"}]}